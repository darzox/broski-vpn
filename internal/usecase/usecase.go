package usecase

import (
	"context"
	"database/sql"
	"fmt"
	"log/slog"
	"strings"
	"time"

	"github.com/darzox/broski-vpn/internal/clients/http_invoice"
	"github.com/darzox/broski-vpn/internal/clients/outline"
	"github.com/darzox/broski-vpn/internal/repository"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/pkg/errors"
)

const (
	MonthlySubscriptionDays = 30
	YearlySubscriptionDays  = 365
)

type Repository interface {
	repository.UserDataStorage
	repository.KeyDataStorage
	repository.TransactionDataStorage
}

type usecase struct {
	logger               *slog.Logger
	repo                 Repository
	telegramInvoceClient *http_invoice.TelegramHTTPClient
	outlineClient        *outline.OutlineHttpClient
	monthPriceInXTR      int
	supportUsername      string
	yearPriceInXTR       int
}

func New(logger *slog.Logger, repo Repository, tgInvoiceClinet *http_invoice.TelegramHTTPClient, outlineClient *outline.OutlineHttpClient, monthPriceInXTR int, supportUsername string, yearPriceInXTR int) *usecase {
	return &usecase{
		logger:               logger,
		repo:                 repo,
		telegramInvoceClient: tgInvoiceClinet,
		outlineClient:        outlineClient,
		monthPriceInXTR:      monthPriceInXTR,
		supportUsername:      supportUsername,
		yearPriceInXTR:       yearPriceInXTR,
	}
}

func (u *usecase) Start(chatId int64) (string, *tgbotapi.InlineKeyboardMarkup, error) {
	id, err := u.repo.RegisterUserIfNotExists(context.Background(), chatId)
	if err != nil && !errors.Is(err, sql.ErrNoRows) {
		return "", nil, errors.Wrap(err, "RegisterUserIfNotExists")
	}

	if id == 0 {
		message := `–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã`
		inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "getapp"),
			),
		)
		return message, &inlineKeyboard, nil
	}

	accessKey, keyId, err := u.outlineClient.CreateAccessKey()
	if err != nil {
		return "", nil, errors.Wrap(err, "CreateAccessKey")
	}

	expirationDate := time.Now().Add(time.Hour * 24).UTC()

	_, err = u.repo.CreateUserKey(context.Background(), id, keyId, accessKey, expirationDate)
	if err != nil {
		return "", nil, errors.Wrap(err, "CreateUserKey")
	}

	startMessage := fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüëâ –í–∞—à –∫–ª—é—á –∫ –Ω–∞—à–∏–º —Å–µ—Ä–≤–µ—Ä–∞–º \n(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ):\n\n`%s`\n\nüëâ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ 24 —á–∞—Å–∞. \nüëâ –ü–æ–¥–ø–∏—Å–∫–∞ %d üåü –≤ –º–µ—Å—è—Ü. \nüëâ –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /payment\n\nüëâ –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á\n\nüëáüëáüëáüëáüëáüëáüëáüëá", accessKey, u.monthPriceInXTR)

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "getapp"),
		),
	)

	return startMessage, &inlineKeyboard, nil
}

func (u *usecase) GetUserIdByChatId(chatId int64) (int64, error) {
	id, err := u.repo.GetUserIdByChatId(context.Background(), chatId)
	if err != nil {
		return 0, errors.Wrap(err, "GetUserIdByChatId")
	}

	return id, nil
}

func (u *usecase) GetAccessKey(chatId int64) (string, *tgbotapi.InlineKeyboardMarkup, error) {
	id, err := u.GetUserIdByChatId(chatId)
	if err != nil {
		return "", nil, errors.Wrap(err, "GetAccessKey.GetUserIdByChatId")
	}

	accessKeys, err := u.repo.GetAccessKeys(context.Background(), id)
	if err != nil && !errors.Is(err, sql.ErrNoRows) {
		return "", nil, errors.Wrap(err, "GetAccessKey.GetAccessKey")
	}

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "getapp"),
		),
	)

	var messageString string

	if errors.Is(err, sql.ErrNoRows) {
		messageString = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å"
		inlineKeyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–û–ø–ª–∞—Ç–∞", "payment"),
			),
		)

		return messageString, &inlineKeyboard, err
	}

	locationTime, _ := time.LoadLocation("Europe/Moscow")

	if len(accessKeys) == 1 {
		expirationDate := accessKeys[0].ExpirationDate.In(locationTime).Format("2006-01-02 15:04:05")
		messageString = fmt.Sprintf("–í–∞—à –∫–ª—é—á –∫ –Ω–∞—à–∏–º —Å–µ—Ä–≤–µ—Ä–∞–º \n(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ):\n\n`%s`\n –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: %s(–ú–°–ö)", accessKeys[0].AccessKeyString, expirationDate)
		return messageString, &inlineKeyboard, nil
	}

	if len(accessKeys) > 1 {
		messageString = "–í–∞—à–∏ –∫–ª—é—á–∏ –∫ –Ω–∞—à–∏–º —Å–µ—Ä–≤–µ—Ä–∞–º:\n\n"
		for _, key := range accessKeys {
			expirationDate := key.ExpirationDate.In(locationTime).Format("2006-01-02 15:04:05")
			messageString += fmt.Sprintf("`%s`\n –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: %s(–ú–°–ö)\n\n", key.AccessKeyString, expirationDate)
		}

		return messageString, &inlineKeyboard, nil
	}

	return messageString, &inlineKeyboard, err
}

func (u *usecase) RemoveExpiredKeys(ctx context.Context) error {
	outlineKeyIds, err := u.repo.GetExpiredKeysOutlineIds(ctx)
	if err != nil {
		return errors.Wrap(err, "RemoveExpiredKeys.GetExpiredKeysOutlineIds")
	}

	for _, keyId := range outlineKeyIds {
		err := u.outlineClient.DeleteKey(keyId)
		if err != nil {
			return errors.Wrap(err, "RemoveExpiredKeys.DeleteKey")
		}
	}

	return nil
}

func (u *usecase) SendInvoiceForMonth(chatId int64) error {
	err := u.telegramInvoceClient.SendInvoice(chatId, u.monthPriceInXTR, MonthlySubscriptionDays)
	if err != nil {
		return errors.Wrap(err, "SendInvoiceForMonth.SendInvoice")
	}

	return nil
}

func (u *usecase) SendInvoiceForYear(chatId int64) error {
	err := u.telegramInvoceClient.SendInvoice(chatId, u.yearPriceInXTR, YearlySubscriptionDays)
	if err != nil {
		return errors.Wrap(err, "SendInvoiceForYear.SendInvoice")
	}

	return nil
}

func (u *usecase) BuyForFriend(chatId int64) (string, *tgbotapi.InlineKeyboardMarkup, error) {
	message := "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞\n–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –¥—Ä—É–≥–∞"

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ö—É–ø–∏—Ç—å –¥—Ä—É–≥—É –∫–ª—é—á", "payment"),
		),
	)

	return message, &inlineKeyboard, nil
}

func (u *usecase) CreateKey(chatId int64, paymentInfo *tgbotapi.SuccessfulPayment) (string, *tgbotapi.InlineKeyboardMarkup, error) {
	id, err := u.GetUserIdByChatId(chatId)
	if err != nil {
		return "", nil, errors.Wrap(err, "CreateKey.GetUserIdByChatId")
	}

	accessKey, keyId, err := u.outlineClient.CreateAccessKey()
	if err != nil {
		return "", nil, errors.Wrap(err, "CreateKey.CreateAccessKey")
	}

	expirationDate := time.Now().Add(time.Hour * 24 * 30).UTC()
	if strings.Contains(paymentInfo.InvoicePayload, fmt.Sprint(u.yearPriceInXTR)) {
		expirationDate = time.Now().Add(time.Hour * 24 * 365).UTC()
	}

	userKeyId, err := u.repo.CreateUserKey(context.Background(), id, keyId, accessKey, expirationDate)
	if err != nil {
		return "", nil, errors.Wrap(err, "CreateKey.CreateUserKey")
	}

	if paymentInfo == nil || paymentInfo.InvoicePayload == "" {
		return "", nil, errors.Wrap(errors.New("paymentInfo is nil"), "CreateKey")
	}

	err = u.repo.CreatePaymentTransaction(context.Background(), id, userKeyId, paymentInfo.Currency, paymentInfo.TotalAmount, paymentInfo.InvoicePayload, paymentInfo.TelegramPaymentChargeID, paymentInfo.ProviderPaymentChargeID)
	if err != nil {
		u.logger.Warn("failed to create transaction", err)
	}

	message := fmt.Sprintf("–í–∞—à –∫–ª—é—á –∫ –Ω–∞—à–∏–º —Å–µ—Ä–≤–µ—Ä–∞–º \n(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ):\n\n`%s`\n\nüëâ –ü–µ—Ä–∏–æ–¥ –≤ 30 –¥–Ω–µ–π.\n", accessKey)

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "getapp"),
		),
	)

	return message, &inlineKeyboard, nil
}

func (u *usecase) Support(chatId int64) (string, *tgbotapi.InlineKeyboardMarkup, error) {
	id, err := u.GetUserIdByChatId(chatId)
	if err != nil {
		return "", nil, errors.Wrap(err, "Support.GetUserIdByChatId")
	}

	message := fmt.Sprintf("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π id: \n`%d`\n", id)

	urlButton := tgbotapi.NewInlineKeyboardButtonURL("Contact Support", fmt.Sprintf("https://t.me/%s", u.supportUsername))

	// Creating the inline keyboard with the URL button
	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(urlButton),
	)

	return message, &inlineKeyboard, nil
}

func (u *usecase) Payment(chatId int64) (string, *tgbotapi.InlineKeyboardMarkup, error) {
	message := fmt.Sprintf(`–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN

    –ú–µ—Å—è—Ü ‚Äî %d –∑–≤—ë–∑–¥ üåü. –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–∞—à–∏–º VPN-—Å–µ—Ä–≤–µ—Ä–∞–º –Ω–∞ 30 –¥–Ω–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–µ—Ä—Ñ–∏–Ω–≥–∞.

    –ì–æ–¥ ‚Äî –≤—Å–µ–≥–æ %d –∑–≤—ë–∑–¥ üåü! –°—ç–∫–æ–Ω–æ–º—å—Ç–µ 200 –∑–≤—ë–∑–¥ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å VPN –≤–µ—Å—å –≥–æ–¥.`, u.monthPriceInXTR, u.yearPriceInXTR)

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ö—É–ø–∏—Ç—å –Ω–∞ –º–µ—Å—è—Ü", "buysubformonth"),
			tgbotapi.NewInlineKeyboardButtonData("–ö—É–ø–∏—Ç—å –Ω–∞ –≥–æ–¥", "buysubforyear"),
		),
	)

	return message, &inlineKeyboard, nil
}

func (u *usecase) BuyForMonth(chatId int64) error {
	err := u.SendInvoiceForMonth(chatId)
	if err != nil {
		return nil
	}

	return nil
}

func (u *usecase) BuyForYear(chatId int64) error {
	err := u.SendInvoiceForYear(chatId)
	if err != nil {
		return nil
	}

	return nil
}
